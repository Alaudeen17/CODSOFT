from collections import deque

def water_jug_problem(jug1_capacity, jug2_capacity, initial_jug1, initial_jug2, goal):
    queue = deque([(initial_jug1, initial_jug2)])
    visited = {(initial_jug1, initial_jug2)}

    while queue:
        jug1, jug 2 = queue.popleft()
        print(f"Current State: Jug 1 = {jug1}, Jug 2 = {jug2}")
        
        if jug 1 == goal or jug 2 == goal:
            print("Goal state reached!")
            return
        
        possible_states = [
            (jug1_capacity, jug2), (jug1, jug2_capacity),  # Fill either jug
            (0, jug2), (jug1, 0),                         # Empty either jug
            (jug1 - min(jug1, jug2_capacity - jug2), jug2 + min(jug1, jug2_capacity - jug2)),  # Pour Jug 1 -> Jug 2
            (jug1 + min(jug2, jug1_capacity - jug1), jug2 - min(jug2, jug1_capacity - jug1))   # Pour Jug 2 -> Jug 1
        ]
        
        for state in possible_states:
            if state not in visited:
                queue.append(state)
                visited.add(state)
    
    print("Goal state cannot be reached with the given capacities.")

# Main function to get user input and solve the problem
if __name__ == "__main__":
    jug1_capacity = int(input("Enter the capacity of Jug 1: "))
    jug2_capacity = int(input("Enter the capacity of Jug 2: "))
    initial_jug 1 = int(input("Enter the initial amount of water in Jug 1: "))
    initial_jug 2= int(input("Enter the initial amount of water in Jug 2: "))
    goal = int(input("Enter the goal amount of water to achieve: "))
    
    water_jug_problem(jug1_capacity, jug2_capacity, initial_jug1, initial_jug2, goal)